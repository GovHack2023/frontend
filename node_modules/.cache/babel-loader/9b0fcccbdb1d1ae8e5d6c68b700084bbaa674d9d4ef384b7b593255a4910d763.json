{"ast":null,"code":"var _jsxFileName = \"/Users/zxj/Desktop/GovHack/mainCode/frontend/src/utils/ShowTextInTime.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport \"../css/showTextInTime.css\";\nimport { sendRequest } from \"./requests\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ShowTextInTime() {\n  _s();\n  const [data, setData] = useState({});\n  const [userName, setUserName] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  useEffect(() => {\n    const interval = setInterval(() => {\n      sendRequest(\"/mastodon/recent\").then(res => {\n        if (res.data.status === 200) {\n          // Request was successful\n          setData(res.data.data);\n          console.log(res.data.status);\n        } else {\n          // Handle other status codes\n          throw new Error(\"Mastodon is down\");\n        }\n      }).catch(error => {\n        if (error.message === \"Mastodon is down\") {\n          setData({\n            username: \"Error\",\n            content: \"Mastodon is down\"\n          });\n        }\n        // Handle network or other errors without logging to the console\n      });\n    }, 10000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n  useEffect(() => {\n    let newUser = data.username;\n    let newText = data.content;\n    if (newText && newText.length > 100) {\n      newText = newText.slice(0, 100) + \"...\";\n    }\n    setUserName(newUser);\n    setText(newText);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: \"purple\",\n        textAlign: \"center\",\n        marginTop: \"5%\",\n        fontSize: \"18px\"\n      },\n      children: [\"Real Time Mastodon Content\", \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"containerInTime\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"textInTime\",\n        children: Object.keys(data).length === 0 ? \"Loading...\" : `${userName}: ${text}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(ShowTextInTime, \"eDct7Qjl89Kt7oaw1g3R2xAgfRg=\");\n_c = ShowTextInTime;\nexport default ShowTextInTime;\nvar _c;\n$RefreshReg$(_c, \"ShowTextInTime\");","map":{"version":3,"names":["useState","useEffect","sendRequest","jsxDEV","_jsxDEV","Fragment","_Fragment","ShowTextInTime","_s","data","setData","userName","setUserName","text","setText","interval","setInterval","then","res","status","console","log","Error","catch","error","message","username","content","clearInterval","newUser","newText","length","slice","children","style","color","textAlign","marginTop","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","className","Object","keys","_c","$RefreshReg$"],"sources":["/Users/zxj/Desktop/GovHack/mainCode/frontend/src/utils/ShowTextInTime.js"],"sourcesContent":["import { useState, useEffect } from \"react\"\r\nimport \"../css/showTextInTime.css\"\r\nimport { sendRequest } from \"./requests\"\r\n\r\nfunction ShowTextInTime () {\r\n  const [data, setData] = useState({})\r\n  const [userName, setUserName] = useState(\"\")\r\n  const [text, setText] = useState(\"\")\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      sendRequest(\"/mastodon/recent\")\r\n        .then((res) => {\r\n          if (res.data.status === 200) {\r\n            // Request was successful\r\n            setData(res.data.data)\r\n            console.log(res.data.status)\r\n          } else {\r\n            // Handle other status codes\r\n            throw new Error(\"Mastodon is down\")\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (error.message === \"Mastodon is down\") {\r\n            setData({\r\n              username: \"Error\",\r\n              content: \"Mastodon is down\",\r\n            })\r\n          }\r\n          // Handle network or other errors without logging to the console\r\n\r\n        })\r\n    }, 10000)\r\n\r\n    return () => {\r\n      clearInterval(interval)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    let newUser = data.username\r\n    let newText = data.content\r\n\r\n    if (newText && newText.length > 100) {\r\n      newText = newText.slice(0, 100) + \"...\"\r\n    }\r\n    setUserName(newUser)\r\n    setText(newText)\r\n  }, [data])\r\n\r\n  return (\r\n    <>\r\n      <h1\r\n        style={{\r\n          color: \"purple\",\r\n          textAlign: \"center\",\r\n          marginTop: \"5%\",\r\n          fontSize: \"18px\",\r\n        }}\r\n      >\r\n        Real Time Mastodon Content{\" \"}\r\n      </h1>\r\n      <div className=\"containerInTime\">\r\n        <div className=\"textInTime\">\r\n          {Object.keys(data).length === 0\r\n            ? \"Loading...\"\r\n            : `${userName}: ${text}`}\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\nexport default ShowTextInTime\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}