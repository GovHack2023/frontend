{"ast":null,"code":"var _jsxFileName = \"/Users/zxj/Desktop/GovHack/mainCode/frontend/src/utils/TreeMapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport ReactECharts from \"echarts-for-react\";\nimport { sendRequest } from \"./requests\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TreeMapComponent = ({\n  Flag\n}) => {\n  _s();\n  //determine what is clicked\n  let targetGcc = \"sydney\";\n  if (Flag.Melbourne === false && Flag.Sydney === false && Flag.Perth === false && Flag.Brisbane === false) {\n    targetGcc = \"sydney\";\n  } else if (Flag.Melbourne === true && Flag.Sydney === false && Flag.Perth === false && Flag.Brisbane === false) {\n    targetGcc = \"melbourne\";\n  } else if (Flag.Melbourne === false && Flag.Sydney === true && Flag.Perth === false && Flag.Brisbane === false) {\n    targetGcc = \"sydney\";\n  } else if (Flag.Melbourne === false && Flag.Sydney === false && Flag.Perth === true && Flag.Brisbane === false) {\n    targetGcc = \"perth\";\n  } else if (Flag.Melbourne === false && Flag.Sydney === false && Flag.Perth === false && Flag.Brisbane === true) {\n    targetGcc = \"brisbane\";\n  }\n\n  //get the data from the backend\n  const [wcData, setWcData] = useState([]);\n  useEffect(() => {\n    sendRequest(\"/twitter/treemap\").then(res => {\n      setWcData(res.data.data);\n    });\n  }, []);\n  const rightGccData = wcData[targetGcc];\n\n  //abtract the right data\n  let data;\n  if (typeof rightGccData === \"undefined\") {\n    data = [{\n      name: \"loading\",\n      value: 0\n    }];\n  } else {\n    data = Object.entries(rightGccData).map(([name, value]) => ({\n      name,\n      value\n    }));\n  }\n  const getOption = () => {\n    return {\n      series: [{\n        type: \"treemap\",\n        data: data,\n        leafDepth: 3,\n        visibleMin: 30,\n        universalTransition: true,\n        label: {\n          show: true,\n          formatter: \"{b}\"\n        },\n        itemStyle: {\n          borderColor: \"#fff\"\n        }\n      }]\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(ReactECharts, {\n    option: getOption(),\n    style: {\n      width: \"100%\",\n      height: \"90%\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(TreeMapComponent, \"PcvRsKDOJheK5yMXGRTEIVFu8GY=\");\n_c = TreeMapComponent;\nexport default TreeMapComponent;\nvar _c;\n$RefreshReg$(_c, \"TreeMapComponent\");","map":{"version":3,"names":["React","useEffect","useState","ReactECharts","sendRequest","jsxDEV","_jsxDEV","TreeMapComponent","Flag","_s","targetGcc","Melbourne","Sydney","Perth","Brisbane","wcData","setWcData","then","res","data","rightGccData","name","value","Object","entries","map","getOption","series","type","leafDepth","visibleMin","universalTransition","label","show","formatter","itemStyle","borderColor","option","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/zxj/Desktop/GovHack/mainCode/frontend/src/utils/TreeMapComponent.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ReactECharts from \"echarts-for-react\";\nimport { sendRequest } from \"./requests\";\nconst TreeMapComponent = ({ Flag }) => {\n  //determine what is clicked\n  let targetGcc = \"sydney\";\n  if (\n    Flag.Melbourne === false &&\n    Flag.Sydney === false &&\n    Flag.Perth === false &&\n    Flag.Brisbane === false\n  ) {\n    targetGcc = \"sydney\";\n  } else if (\n    Flag.Melbourne === true &&\n    Flag.Sydney === false &&\n    Flag.Perth === false &&\n    Flag.Brisbane === false\n  ) {\n    targetGcc = \"melbourne\";\n  } else if (\n    Flag.Melbourne === false &&\n    Flag.Sydney === true &&\n    Flag.Perth === false &&\n    Flag.Brisbane === false\n  ) {\n    targetGcc = \"sydney\";\n  } else if (\n    Flag.Melbourne === false &&\n    Flag.Sydney === false &&\n    Flag.Perth === true &&\n    Flag.Brisbane === false\n  ) {\n    targetGcc = \"perth\";\n  } else if (\n    Flag.Melbourne === false &&\n    Flag.Sydney === false &&\n    Flag.Perth === false &&\n    Flag.Brisbane === true\n  ) {\n    targetGcc = \"brisbane\";\n  }\n\n  //get the data from the backend\n  const [wcData, setWcData] = useState([]);\n\n  useEffect(() => {\n    sendRequest(\"/twitter/treemap\").then((res) => {\n      setWcData(res.data.data);\n    });\n  }, []);\n\n  const rightGccData = wcData[targetGcc];\n\n  //abtract the right data\n  let data;\n\n  if (typeof rightGccData === \"undefined\") {\n    data = [{ name: \"loading\", value: 0 }];\n  } else {\n    data = Object.entries(rightGccData).map(([name, value]) => ({\n      name,\n      value,\n    }));\n  }\n\n  const getOption = () => {\n    return {\n      series: [\n        {\n          type: \"treemap\",\n          data: data,\n          leafDepth: 3,\n          visibleMin: 30,\n          universalTransition: true,\n          label: {\n            show: true,\n            formatter: \"{b}\",\n          },\n          itemStyle: {\n            borderColor: \"#fff\",\n          },\n        },\n      ],\n    };\n  };\n\n  return (\n    <ReactECharts\n      option={getOption()}\n      style={{ width: \"100%\", height: \"90%\" }}\n    />\n  );\n};\n\nexport default TreeMapComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}