{"ast":null,"code":"var _jsxFileName = \"/Users/zxj/Desktop/GovHack/mainCode/frontend/src/utils/LineChartComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport ReactECharts from \"echarts-for-react\";\nimport \"../css/selector.css\";\nimport { sendRequest } from \"./requests\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LineChartComponent = () => {\n  _s();\n  const chartRef = useRef(null);\n  const [jobData, setJobData] = useState([]);\n  const [famData, setFamData] = useState([]);\n  const [selectedDataType, setSelectedDataType] = useState(\"job\");\n  useEffect(() => {\n    sendRequest(\"/ado/job\").then(res => {\n      setJobData(res.data.data);\n    });\n  }, []);\n  useEffect(() => {\n    sendRequest(\"/ado/family\").then(res => {\n      setFamData(res.data.data);\n    });\n  }, []);\n  useEffect(() => {\n    if (chartRef.current) {\n      chartRef.current.getEchartsInstance().resize();\n    }\n  }, [selectedDataType]);\n  const jobDataDate = {};\n  jobData.forEach(element => {\n    if (jobDataDate[element.date]) {\n      jobDataDate[element.date] += element.total;\n    } else {\n      jobDataDate[element.date] = element.total;\n    }\n  });\n  const famDataDate = {};\n  famData.forEach(element => {\n    if (famDataDate[element.date]) {\n      famDataDate[element.date] += element.total;\n    } else {\n      famDataDate[element.date] = element.total;\n    }\n  });\n  const selectTheData = event => {\n    setSelectedDataType(event.target.value);\n  };\n  const getOption = () => {\n    return {\n      title: {\n        text: \"ADO Posts Related to Job and Family\",\n        left: \"center\",\n        textStyle: {\n          color: \"purple\"\n        }\n      },\n      tooltip: {\n        trigger: \"axis\"\n      },\n      xAxis: {\n        type: \"category\",\n        data: selectedDataType === \"job\" ? Object.keys(jobDataDate) : Object.keys(famDataDate)\n      },\n      yAxis: {\n        type: \"value\",\n        axisLabel: {\n          rotate: 40\n        }\n      },\n      series: [{\n        name: \"Line 1\",\n        type: \"line\",\n        data: selectedDataType === \"job\" ? Object.values(jobDataDate) : Object.values(famDataDate),\n        color: \"#0099ff\"\n      }]\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedDataType,\n        onChange: selectTheData,\n        className: \"custom-select\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"job\",\n          children: \"Job Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"family\",\n          children: \"Family Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"100%\",\n        height: \"200px\"\n      },\n      children: jobData.length > 0 || famData.length > 0 ? /*#__PURE__*/_jsxDEV(ReactECharts, {\n        ref: chartRef,\n        option: getOption(),\n        style: {\n          width: \"100%\",\n          height: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading chart...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(LineChartComponent, \"2WKcBQfoJ9kC/XmNbh909i5Ea+s=\");\n_c = LineChartComponent;\nexport default LineChartComponent;\nvar _c;\n$RefreshReg$(_c, \"LineChartComponent\");","map":{"version":3,"names":["React","useEffect","useState","useRef","ReactECharts","sendRequest","jsxDEV","_jsxDEV","LineChartComponent","_s","chartRef","jobData","setJobData","famData","setFamData","selectedDataType","setSelectedDataType","then","res","data","current","getEchartsInstance","resize","jobDataDate","forEach","element","date","total","famDataDate","selectTheData","event","target","value","getOption","title","text","left","textStyle","color","tooltip","trigger","xAxis","type","Object","keys","yAxis","axisLabel","rotate","series","name","values","children","onChange","className","fileName","_jsxFileName","lineNumber","columnNumber","style","width","height","length","ref","option","_c","$RefreshReg$"],"sources":["/Users/zxj/Desktop/GovHack/mainCode/frontend/src/utils/LineChartComponent.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport ReactECharts from \"echarts-for-react\";\nimport \"../css/selector.css\";\nimport { sendRequest } from \"./requests\";\n\nconst LineChartComponent = () => {\n  const chartRef = useRef(null);\n  const [jobData, setJobData] = useState([]);\n  const [famData, setFamData] = useState([]);\n  const [selectedDataType, setSelectedDataType] = useState(\"job\");\n\n  useEffect(() => {\n    sendRequest(\"/ado/job\").then((res) => {\n      setJobData(res.data.data);\n    });\n  }, []);\n\n  useEffect(() => {\n    sendRequest(\"/ado/family\").then((res) => {\n      setFamData(res.data.data);\n    });\n  }, []);\n\n  useEffect(() => {\n    if (chartRef.current) {\n      chartRef.current.getEchartsInstance().resize();\n    }\n  }, [selectedDataType]);\n\n  const jobDataDate = {};\n  jobData.forEach((element) => {\n    if (jobDataDate[element.date]) {\n      jobDataDate[element.date] += element.total;\n    } else {\n      jobDataDate[element.date] = element.total;\n    }\n  });\n\n  const famDataDate = {};\n  famData.forEach((element) => {\n    if (famDataDate[element.date]) {\n      famDataDate[element.date] += element.total;\n    } else {\n      famDataDate[element.date] = element.total;\n    }\n  });\n\n  const selectTheData = (event) => {\n    setSelectedDataType(event.target.value);\n  };\n\n  const getOption = () => {\n    return {\n      title: {\n        text: \"ADO Posts Related to Job and Family\",\n        left: \"center\",\n        textStyle: {\n          color: \"purple\",\n        },\n      },\n      tooltip: {\n        trigger: \"axis\",\n      },\n      xAxis: {\n        type: \"category\",\n        data:\n          selectedDataType === \"job\"\n            ? Object.keys(jobDataDate)\n            : Object.keys(famDataDate),\n      },\n      yAxis: {\n        type: \"value\",\n        axisLabel: {\n          rotate: 40,\n        },\n      },\n      series: [\n        {\n          name: \"Line 1\",\n          type: \"line\",\n          data:\n            selectedDataType === \"job\"\n              ? Object.values(jobDataDate)\n              : Object.values(famDataDate),\n          color: \"#0099ff\",\n        },\n      ],\n    };\n  };\n\n  return (\n    <div>\n      <div>\n        <select\n          value={selectedDataType}\n          onChange={selectTheData}\n          className=\"custom-select\"\n        >\n          <option value=\"job\">Job Data</option>\n          <option value=\"family\">Family Data</option>\n        </select>\n      </div>\n      <div style={{ width: \"100%\", height: \"200px\" }}>\n        {jobData.length > 0 || famData.length > 0 ? (\n          <ReactECharts\n            ref={chartRef}\n            option={getOption()}\n            style={{ width: \"100%\", height: \"100%\" }}\n          />\n        ) : (\n          <div>Loading chart...</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default LineChartComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}